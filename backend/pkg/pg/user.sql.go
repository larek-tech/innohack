// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package pg

import (
	"context"
)

const changeSessionStatus = `-- name: ChangeSessionStatus :exec
UPDATE user_sessions
SET is_valid = $2
WHERE user_id = $1
`

type ChangeSessionStatusParams struct {
	UserID  int64
	IsValid bool
}

func (q *Queries) ChangeSessionStatus(ctx context.Context, arg ChangeSessionStatusParams) error {
	_, err := q.db.Exec(ctx, changeSessionStatus, arg.UserID, arg.IsValid)
	return err
}

const createEmailRecord = `-- name: CreateEmailRecord :exec
INSERT INTO email_account(user_id, password)
VALUES($1, $2)
`

type CreateEmailRecordParams struct {
	UserID   int64
	Password string
}

func (q *Queries) CreateEmailRecord(ctx context.Context, arg CreateEmailRecordParams) error {
	_, err := q.db.Exec(ctx, createEmailRecord, arg.UserID, arg.Password)
	return err
}

const createUserRecord = `-- name: CreateUserRecord :one
INSERT INTO user_profiles(email, first_name, last_name, otp_secret)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserRecordParams struct {
	Email     string
	FirstName string
	LastName  string
	OtpSecret string
}

func (q *Queries) CreateUserRecord(ctx context.Context, arg CreateUserRecordParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUserRecord,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.OtpSecret,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions(session_id, user_id, user_agent)
VALUES($1, $2, $3)
RETURNING id
`

type CreateUserSessionParams struct {
	SessionID string
	UserID    int64
	UserAgent string
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.SessionID, arg.UserID, arg.UserAgent)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id,
    u.email,
    e.password
FROM user_profiles u
    JOIN email_account e on u.id = e.user_id
WHERE u.email = $1
`

type GetUserByEmailRow struct {
	ID       int64
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT u.id, u.email, u.first_name, u.last_name, u.otp_secret, u.verified, u.created_at, u.updated_at, u.deleted_at
from user_profiles u
WHERE u.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.OtpSecret,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserDataFromSessionID = `-- name: GetUserDataFromSessionID :one
SELECT s.session_id,
    s.user_agent,
    u.id,
    u.email,
    u.first_name
FROM user_sessions s
    JOIN user_profiles u ON s.user_id = u.id
WHERE s.is_valid = TRUE
`

type GetUserDataFromSessionIDRow struct {
	SessionID string
	UserAgent string
	ID        int64
	Email     string
	FirstName string
}

func (q *Queries) GetUserDataFromSessionID(ctx context.Context) (GetUserDataFromSessionIDRow, error) {
	row := q.db.QueryRow(ctx, getUserDataFromSessionID)
	var i GetUserDataFromSessionIDRow
	err := row.Scan(
		&i.SessionID,
		&i.UserAgent,
		&i.ID,
		&i.Email,
		&i.FirstName,
	)
	return i, err
}
